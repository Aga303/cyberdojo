
<script language="javascript" 
        type="text/javascript">

document.observe('dom:loaded', function() 
{
  setupFilenameMenu();
})

function setupFilenameMenu()
{
  var fileEntryMenuItems = [
    {
      name: 'Rename this file...  ',
      className: 'rename-this-file', 
      callback: function(e) { renameFile(e); }
    },{
      name: 'Delete this file...  ', 
      className: 'delete-this-file',
      callback: function(e) { deleteFile(e); }
    }
  ]

  new Proto.Menu({
    selector: '#radioFilename', 
    className: 'menu desktop', 
    menuItems: fileEntryMenuItems
  })
}

//====================== RENAME FILE =======================

function renameFile(event)
{
  var filename = firstElement(event.element()).getAttribute('value');

  saveCurrentFile();

  var newname = trim(prompt("Rename " + filename + " to: ", filename));
  if (newname == null)
    return; // Cancelled

  if (newname == "") 
  {
    alert("Nothing entered: rename abandoned");
    return;
  }

  if (newname == filename)
  {
    // should I alert()?
    return;
  }

  if (fileAlreadyExists(newname))
  {
    alert("CyberDojo cannot rename " +
           filename + " to " + newname +
          "\nbecause a file called " +
           newname +
          " already exists.");
    return; // Cancelled
  }

  // do it!
  var content = fileContent(filename).getAttribute('value');
  $('visible_files_container').appendChild(createFileContentInput(newname, content));
  //$('visible_files_container').removeChild(fileContent(filename));

  var caretPos = fileCaretPos(filename).getAttribute('value');
  $('visible_files_container').appendChild(createFileCaretPosInput(newname, caretPos));
  //$('visible_files_container').removeChild(fileCaretPos(filename));

  // change name in file-list
  var tr = getFilenameTr(filename);
  var tbody = tr.parentNode;
  tbody.removeChild(tr);
  tbody.appendChild(makeFileListEntry(newname));
  sortFileList();

  // if we are renaming the current file then reselect in the file-list
  if (filename == current_filename)
  {
    current_file = newname;
    loadFile(newname);
  }
  // make sure renamed file-entry has drop-down menu
  setupFilenameMenu();

  // ensure line-numbers repositions by removing and re-adding
  // (renaming a file can alter the file-list panel width)
  var old = document.getElementById('line_numbers');
  old.parentNode.removeChild(old);
  createTextAreaWithLineNumbers('editor', "<%=@kata.tab-%>");
  TabEntry.enable('editor');
}

//====================== DELETE FILE =======================

function deleteFile(event)
{
  var filename = firstElement(event.element()).getAttribute('value');

  if (!confirm("Click OK to delete " + filename))
    return; // Cancelled

  // if deleted file is current file then load kata.sh
  // which is always available as it cannot be renamed or deleted
  if (filename == current_filename) 
  {
    // disable auto saveCurrentFile() call in loadFile()
    // IDEA: if not actually deleting wouldn't do this so save happens
    //current_filename = false;
    loadFile('kata.sh');
  }


  // remove from file-list 
  var tr = getFilenameTr(filename);
  var tbody = tr.parentNode;
  tbody.removeChild(tr);

  // remove hidden textarea
  // IDEA: don't remove it from here, only from filenames_container
  //       so that it can be reopened if needed...
  $('visible_files_container').removeChild($(filename));

  // remove from visible_filenames_container
  var current = $('visible_filenames_container').value;
  current = current.replace(';'+filename+";", ";");
  $('visible_filenames_container').value = current;

}

//====================== NEW FILE =======================

function newFile()
{
  // Append three random chars to the end of the untitled filename.
  // This is so there is NO excuse not to rename it!
  var filename = 'untitled_' + random3();

  // Create new hidden input elements to store new file content
  // and its caret position (to save to before submitting form)
  $('visible_files_container').appendChild(createFileContentInput(filename, ''));
  $('visible_files_container').appendChild(createFileCaretPosInput(filename, '0'));

  // Put the new filename into the file-list manager
  $('file-list').appendChild(makeFileListEntry(filename));
  sortFileList();

  //TODO: drop this when file_content[...] working
  // Put the new filename into the filenames container
  //var filenames = trim($('visible_filenames_container').value);
  //filenames += filename;
  //filenames += ";";
  //$('visible_filenames_container').value = filenames;

  // Add right-click menu to file-list manager entry
  setupFilenameMenu();
}

function createFileContentInput(filename, content)
{
  var input = new Element('input');
  input.setAttribute('type', 'hidden');
  input.setAttribute('name', "file_content['" + filename + "']");
  input.setAttribute('id', "file_content['" + filename + "']");
  input.setAttribute('value', content);
  return input;
}

function createFileCaretPosInput(filename, caret_pos)
{
  var input = new Element('input');
  input.setAttribute('type', 'hidden');
  input.setAttribute('name', "file_caret_pos['" + filename + "']");
  input.setAttribute('id', "file_caret_pos['" + filename + "']");
  input.setAttribute('value', caret_pos);
  return input;
}

function trim(stringToTrim) 
{
  return stringToTrim.replace(/^\s+|\s+$/g,"");
}


function getFilenameTr(filename)
{
  var input = document.getElementById('radio_' + filename);
  var div = input.parentNode;
  var td = div.parentNode;
  var tr = td.parentNode;
  return tr;
}


function makeFileListEntry(filename)
{
  // assert(filename != kata.sh)

  var div = new Element("div", { id:"radioFilename" });
  div.title = "Right-click=rename/delete";
  div.onclick = new Function("loadFile('" + filename + "')");
  var inp = new Element("input", 
    { id:"radio_" + filename, name:"radio_filename", type:"radio", value:filename });
  div.appendChild(inp);
  div.appendChild(document.createTextNode(filename));
  var td = new Element("td");
  td.appendChild(div);
  var tr = new Element("tr");
  tr.appendChild(td);

  return tr;
}

function isElement(n)
{
  return n.nodeType == 1;
}

function firstElement(e)
{
  var children = e.childNodes;
  for (var i in children)
  {
    var item = children[i];
    if (isElement(item))
      return item;
  }
  return null;
}

function nameOf(e)
{
  var td = firstElement(e);
  var div = firstElement(td);
  var inp = firstElement(div);
  return inp.getAttribute("value"); 
}

function sortFileList()
{
  var list = $('file-list');
  var items = list.childNodes;
  var array = [];

  for (var i in items)
  {
    var item = items[i];
    if (isElement(item))
      array.push(item);
  }

  array.sort(function(lhs,rhs) {
    var lhs_name = nameOf(lhs);
    var rhs_name = nameOf(rhs);
    if (lhs_name < rhs_name)
      return -1;
    else if (lhs_name > rhs_name)
      return 1;
    else
      return 0; // should never happen!
  });

  for (i = 0; i != array.length; i++)
    list.appendChild(array[i]);
}

function allFilenames()
{
  filenames = []
  var all = $$('input[id^="file_content["]');
  for(at = 0; at != all.length; at++)
  {
    var att = all[at].getAttribute('id');
    var prefix = 'file_content['.length + 1; // +1 for '
    var filename = att.substr(prefix, att.length - prefix - 1 - 1); // +1 for ', +1 for ]
    filenames.push(filename);
  }
  return filenames;
}

function fileAlreadyExists(filename)
{
  return allFilenames().indexOf(filename) != -1;
}

function random3() 
{
    var chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZ'.split('');
    var str = '';
    for (var i = 0; i < 3; i++) 
    {
        str += chars[Math.floor(Math.random() * chars.length)];
    }
    return str;
}

</script>

