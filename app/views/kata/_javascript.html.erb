
<% # NB: I've tried putting the contents of this file into -%>
<% #     public/javascripts/application.js but it only works here -%>

<script language="javascript" type="text/javascript">

function trim(stringToTrim) 
{
  return stringToTrim.replace(/^\s+|\s+$/g,"");
}

function renameFile(e) 
{
  var filename = trim(e.element().lastChild.nodeValue);

  if (filename == "kata.sh")
  {
    alert(filename + " cannot be renamed (it is the file the " +
      "Cyber-Dojo server executes on each iteration).");
    return;
  }

  var newname = trim(prompt("Rename " + filename + " to: ", ""));
  if (newname == null)
    return; // Cancelled

  if (newname == "") 
  {
    alert("Nothing entered: rename abandoned");
    return;
  }
   
  // TODO: what if there is already a file with the chosen name

  // rename hidden textarea by creating new one
  var ta = new Element("textarea", 
    { id:newname, name:newname }).update($(filename).value);
  $('visible_files_container').appendChild(ta);

  //TODO: and then removing the old one

  // change name in $('visible_files_container')
  var current = $('visible_filenames_container').value;
  current = current.replace(';'+filename+";", ";"+newname+";");
  $('visible_filenames_container').value = current;

  // change name in file-list
  var td = e.element().parentNode;
  var tr = td.parentNode;
  var tbody = tr.parentNode;
  tbody.removeChild(tr);
  tbody.appendChild(makeFileListEntry(newname));
  sortFileList();
}

function deleteFile(e) 
{
  var filename = trim(e.element().lastChild.nodeValue);

  if (filename == "kata.sh")
  {
    alert(filename + " cannot be deleted (it is the file the " +
      "Cyber-Dojo server executes on each iteration).");
    return;
  }

  if (!confirm("Click OK to delete " + filename))
    return; // Cancelled

  // remove from file-list
  var td = e.element().parentNode;
  var tr = td.parentNode;
  var tbody = tr.parentNode;
  tbody.removeChild(tr);

  // remove hidden textarea
  $('visible_files_container').removeChild($(filename));

  // remove from visible_filenames_container
  var current = $('visible_filenames_container').value;
  current = current.replace(';'+filename+";", ";");
  $('visible_filenames_container').value = current;

  // if deleted file is current file set editor textarea to empty
  if (filename == current_filename) 
  {
    current_filename = false;
    $('editor').value = "";
  }
}

function homePage()
{
  window.location = "/dojo/index/<%= @kata.id -%>";
}

function arcPage()
{
  window.open("/kata/see_all_increments/<%= @kata.id -%>");
}

document.observe('dom:loaded', function() {
  var myMenuItems = [
    {
      name: 'Create a new file...  ',
      className: 'create-a-new-file', 
      callback: function(e) { newFile(); }
    },{
    separator: true
    },{
      name: 'Rename this file...  ',
      className: 'rename-this-file', 
      callback: function(e) { renameFile(e); }
    },{
    separator: true
    },{
      name: 'Delete this file...  ', 
      className: 'delete-this-file',
      callback: function(e) { deleteFile(e); }
    }
  ]

  new Proto.Menu({
    selector: '#file-list', 
    className: 'menu desktop', // (can be used for css styling)
    menuItems: myMenuItems
  })

  var myItems = [
    {
      name: 'Go to the Cyber-Dojo home page  ',
      className: 'go-to-home-page', 
      callback: function(e) { homePage(); }
    },{
    separator: true
    },{
      name: 'Open new Cyber-Dojo arc page  ',
      className: 'go-to-arc-page', 
      callback: function(e) { arcPage(); }
    }
  ]

  new Proto.Menu({
    selector: '#run-tests-button', 
    className: 'menu desktop', // (can be used for css styling)
    menuItems: myItems
  })
})

function atLoad()
{
  <% @manifest[:visible_files].each do |filename,info| -%>
    <% if info.include? :preloaded and info[:preloaded] -%>
         loadFile("<%=filename-%>");
    <%- end -%>
  <%- end -%>
}
window.onload = atLoad;

var current_filename = false;

function saveCurrentFile()
{
  if (current_filename) 
  {
    $(current_filename).value = $('editor').value;
  }
}

function loadFile(name)
{
  saveCurrentFile();
  $('editor').value = $(name).value;
  current_filename = name;
  document.getElementById('radio_' + name).checked = true;
}

function preRunTests()
{
  saveCurrentFile();
  Element.show('run_tests_spinner');
}

function postRunTests()
{
   Element.hide('run_tests_spinner');
}

function predict(prediction)
{
   $('run_tests_prediction').value = prediction;
}

function makeFileListEntry(filename)
{
  var div = new Element("div");
  div.onclick = new Function("loadFile('" + filename + "')");
  var inp = new Element("input", 
    { id:"radio_" + filename, name:"radio_filename", type:"radio", value:filename });
  div.appendChild(inp);
  div.appendChild(document.createTextNode(filename));
  var td = new Element("td");
  td.appendChild(div);
  var tr = new Element("tr");
  tr.appendChild(td);

  return tr;
}

function firstElement(e)
{
  var children = e.childNodes;
  for (var i in children)
  {
    var item = children[i];
    if (item.nodeType == 1)
      return item;
  }
  return null;
}

function nameOf(e)
{
  var td = firstElement(e);
  var div = firstElement(td);
  var inp = firstElement(div);
  var n = inp.getAttribute("value"); 
  return n;
}

function sortFileList()
{
  var list = $('file-list');
  var items = list.childNodes;
  var array = [];

  for (var i in items)
  {
    var item = items[i];
    if (item.nodeType == 1) // element node
      array.push(item);
  }

  array.sort(function(lhs,rhs) {
    var lhs_name = nameOf(lhs);
    var rhs_name = nameOf(rhs);
    if (lhs_name < rhs_name)
      return -1;
    else if (lhs_name > rhs_name)
      return 1;
    else
      return 0; // should never happen!
  });

  for (i = 0; i != array.length; i++)
    list.appendChild(array[i]);
}

function newFile()
{
  var filename = trim(prompt("Enter the new file's name: ", ""));
  if (filename == null)
    return; // Cancelled

  if (filename == "") 
  {
    alert("Nothing entered: new-file abandoned");
    return;
  }

  // Create new hidden textarea (to save to before submitting)
  var ta = new Element("textarea", { id:filename, name:filename });
  $('visible_files_container').appendChild(ta);

  // Make the new filename visible in the file-manager list
  $('file-list').appendChild(makeFileListEntry(filename));
  sortFileList();

  // make its name available to rails
  var current = $('visible_filenames_container').value;
  current += filename;
  current += ";";
  $('visible_filenames_container').value = current;

  loadFile(filename);
}
</script>

