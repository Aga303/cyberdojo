
<% # NB: I've tried putting the contents of this file into -%>
<% #     public/javascripts/application.js but it only works here -%>

<script language="javascript" type="text/javascript">

var move = false;

function getCaretPos(control) 
{
  var caretPos = 0;
  // IE Support
  if (document.selection) 
  {
    control.focus();
    var sel = document.selection.createRange();
    sel.moveStart('character', -control.value.length);
    caretPos = sel.text.length;
  }
  // Firefox support
  else if (control.selectionStart || control.selectionStart == '0')
    caretPos = control.selectionStart;

  return caretPos;
}

function setCaretPos(control, pos)
{
  if (control.setSelectionRange)
  {
    control.focus();
    control.setSelectionRange(pos, pos);
  }
  else if (ctrl.createTextRange) 
  {
    var range = control.createTextRange();
    range.collapse(true);
    range.moveEnd('character', pos);
    range.moveStart('character', pos);
    range.select();
  }
}

function createTextAreaWithLineNumbers(id)
{
  var el = document.createElement('TEXTAREA');
  var ta = document.getElementById(id);
       
  var string = '';
  for (var no = 1; no < 300; no++) {
    if (string.length > 0) 
      string += '\r\n';
    string += no;
  }
       
  el.className      = 'textarea_with_line_numbers';
  el.style.height   = (ta.offsetHeight-3) + "px";
  el.style.position = 'absolute';
  el.style.overflow = 'hidden';
  el.style.textAlign = 'right';
  el.style.width    = '35px';
  el.style.paddingRight = '0.2em';
  el.innerHTML      = string;  // Firefox renders \n linebreak
  el.innerText      = string;  // IE6 renders \n line break
  el.value          = string;  // Safari
  el.style.zIndex   = 0;
  ta.style.zIndex   = 1;
  ta.style.position = 'relative';
  ta.parentNode.insertBefore(el, ta.nextSibling);
  setLine();
  ta.focus();
       
  ta.onscroll     = function() { setLine(); }
  ta.onkeydown    = function() { setLine(); }
  ta.onmousedown  = function() { setLine(); move=true; }
  ta.onmouseup    = function() { setLine(); move=false; }
  ta.onmousemove  = function() { if (move) { setLine(); } }
             
  function setLine() {
    el.scrollTop   = ta.scrollTop;
    el.style.top   = (ta.offsetTop) + "px";
    el.style.left  = (ta.offsetLeft - 37) + "px";
  }
}

function trim(stringToTrim) 
{
  return stringToTrim.replace(/^\s+|\s+$/g,"");
}

function getFilenameTr(filename)
{
  var input = document.getElementById('radio_' + filename);
  var div = input.parentNode;
  var td = div.parentNode;
  var tr = td.parentNode;
  return tr;
}

function renameFile(event)
{
  var filename = firstElement(event.element()).getAttribute('value');

  // Save editor into its hidden textarea so we can
  // just use hidden textareas in code below
  $(current_filename).value = $('editor').value;

  var newname = trim(prompt("Rename " + filename + " to: ", ""));
  if (newname == null)
    return; // Cancelled

  if (newname == "") 
  {
    alert("Nothing entered: rename abandoned");
    return;
  }
   
  // TODO: what if there is already a file with the chosen name (including kata.sh)
  //if (filename == "kata.sh") //TODO: DROP
  //{
  //  alert(filename + " cannot be renamed (it is the file the " +
  //    "Cyber-Dojo server executes on each iteration).");
  //  return;
  //}

  // rename hidden textarea by appending new one...
  var new_ta = new Element("textarea", { id:newname, name:newname });
  new_ta.value = $(filename).value;
  $('visible_files_container').appendChild(new_ta);

  //... and removing old one
  var old_ta = $(filename);
  // BUG: the following line kills the functionality of selecting a file from the 
  // filelist. However, leaving the line in might be useful. Suppose you accidentally
  // delete a file. If it was still available you might be able to reload it by
  // recreating it.
  //$('visible_files_container').removeChild(old_ta);

  // change name in $('visible_filenames_container')
  var current = $('visible_filenames_container').value;
  current = current.replace(';'+filename+";", ";"+newname+";");
  $('visible_filenames_container').value = current;

  // change name in file-list
  var tr = getFilenameTr(filename);
  var tbody = tr.parentNode;
  tbody.removeChild(tr);
  tbody.appendChild(makeFileListEntry(newname));
  sortFileList();
  // if we are renaming the current file then reselect in the file-list
  if (filename == current_filename)
  {
    current_file = newname;
    loadFile(newname);
  }
  // make sure renamed file-entry has drop-down menu
  setupFileEntryMenu();
}

function deleteFile(event)
{
  var filename = firstElement(event.element()).getAttribute('value');

  if (!confirm("Click OK to delete " + filename))
    return; // Cancelled

  // remove from file-list 
  var tr = getFilenameTr(filename);
  var tbody = tr.parentNode;
  tbody.removeChild(tr);

  // remove hidden textarea
  $('visible_files_container').removeChild($(filename));

  // remove from visible_filenames_container
  var current = $('visible_filenames_container').value;
  current = current.replace(';'+filename+";", ";");
  $('visible_filenames_container').value = current;

  // if deleted file is current file then load kata.sh
  // which is always available as it cannot be renamed or deleted
  if (filename == current_filename) 
  {
    // disable auto saveCurrentFile() call in loadFile()
    current_filename = false;
    loadFile('kata.sh');
  }
}

document.observe('dom:loaded', function() {
  <% if !@kata.readonly -%>
    setupFileEntryMenu();
  <% end -%>
  loadFile('kata.sh');
})

function setupFileEntryMenu()
{
  var fileEntryMenuItems = [
    {
      name: 'Rename this file...  ',
      className: 'rename-this-file', 
      callback: function(e) { renameFile(e); }
    },{
      name: 'Delete this file...  ', 
      className: 'delete-this-file',
      callback: function(e) { deleteFile(e); }
    }
  ]

  new Proto.Menu({
    selector: '#radioFilename', 
    className: 'menu desktop', // (can be used for css styling)
    menuItems: fileEntryMenuItems
  })

}

var current_filename = false;

function saveCurrentFile()
{
  if (current_filename) 
  {
    $(current_filename).value = $('editor').value;
    // Save cursor position
    var pos = getCaretPos(document.getElementById('editor'));
    var ta = $(current_filename);
    ta.setAttribute('cursorPos', pos);
  }
}

function loadFile(name)
{
  saveCurrentFile();
  var saved = $(name);
  var editor = $('editor');
  editor.value = saved.value;
  // Set cursor position
  var pos = saved.getAttribute('cursorPos');
  setCaretPos(editor, pos);

  current_filename = name;
  document.getElementById('radio_' + name).checked = true;
}

function preRunTests()
{
  saveCurrentFile();
  Element.show('run_tests_spinner');
}

function postRunTests()
{
   Element.hide('run_tests_spinner');
}

function makeFileListEntry(filename)
{
  // assert(filename != kata.sh)

  var div = new Element("div", { id:"radioFilename" });
  div.onclick = new Function("loadFile('" + filename + "')");
  var inp = new Element("input", 
    { id:"radio_" + filename, name:"radio_filename", type:"radio", value:filename });
  div.appendChild(inp);
  div.appendChild(document.createTextNode(filename));
  var td = new Element("td");
  td.appendChild(div);
  var tr = new Element("tr");
  tr.appendChild(td);

  return tr;
}

function isElement(n)
{
  return n.nodeType == 1;
}

function firstElement(e)
{
  var children = e.childNodes;
  for (var i in children)
  {
    var item = children[i];
    if (isElement(item))
      return item;
  }
  return null;
}

function nameOf(e)
{
  var td = firstElement(e);
  var div = firstElement(td);
  var inp = firstElement(div);
  return inp.getAttribute("value"); 
}

function sortFileList()
{
  var list = $('file-list');
  var items = list.childNodes;
  var array = [];

  for (var i in items)
  {
    var item = items[i];
    if (isElement(item))
      array.push(item);
  }

  array.sort(function(lhs,rhs) {
    var lhs_name = nameOf(lhs);
    var rhs_name = nameOf(rhs);
    if (lhs_name < rhs_name)
      return -1;
    else if (lhs_name > rhs_name)
      return 1;
    else
      return 0; // should never happen!
  });

  for (i = 0; i != array.length; i++)
    list.appendChild(array[i]);
}

function newFile()
{
  var filename = trim(prompt("Enter the new file's name: ", ""));
  if (filename == null)
    return; // Cancelled

  if (filename == "") 
  {
    alert("Nothing entered: new-file abandoned");
    return;
  }

  // TODO: can't be any of the existing filenames

  // Create new hidden textarea (to save to before submitting)
  var ta = new Element("textarea", { id:filename, name:filename });
  $('visible_files_container').appendChild(ta);

  // Make the new filename visible in the file-manager list
  $('file-list').appendChild(makeFileListEntry(filename));
  sortFileList();

  // Make its name available to rails
  var current = trim($('visible_filenames_container').value);
  current += filename;
  current += ";";
  $('visible_filenames_container').value = current;

  setupFileEntryMenu();
}

</script>

