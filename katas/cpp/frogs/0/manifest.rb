{:language=>"cpp", :unit_test_framework=>"assert", :visible_files=>{"makefile"=>{:content=>"run.tests : run.tests.exe\n\t./run.tests.exe\n\nrun.tests.exe : *.cpp\n\tg++ -Wall -Werror *.cpp -o run.tests.exe\n\n\n"}, "kata.sh"=>{:content=>"make\n"}, "source.cpp"=>{:content=>"#include \"source.hpp\"\n\n\n"}, "source.tests.cpp"=>{:content=>"#include \"source.hpp\"\n#include <assert.h>\n#include <string.h>\n\n#define FAIL(x)   assert(0 && (x))\n#define TEST(x)   assert(x)\n#define IGNORE(x) assert(1 || (x))\n\nstatic void an_example_test(void)\n{\n    TEST(strcmp(\"expected\", \"actual\") == 0);\n}\n\nstatic void (*test_functions[])(void) =\n{\n    an_example_test,\n    NULL\n};\n\nint main()\n{\n    for (size_t at = 0; test_functions[at]; at++)\n        test_functions[at]();\n    return 0;\n}\n\n"}, "source.hpp"=>{:content=>""}}}